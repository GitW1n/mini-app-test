import os
import json
from threading import Thread
from fastapi import FastAPI
from pydantic import BaseModel
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from dotenv import load_dotenv
import subprocess
import uvicorn

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
CLIENT_ID = os.getenv("CLIENT_ID")
CLIENT_SECRET = os.getenv("CLIENT_SECRET")
REDIRECT_URI = os.getenv("REDIRECT_URI")
ACSESS_TOKEN = f'https://yoomoney.ru/oauth/authorize?client_id={CLIENT_ID}&redirect_uri=https://gitw1n.github.io/mini-app-test/&response_type=code'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è FastAPI
app = FastAPI()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_balances = {}

# –ú–æ–¥–µ–ª—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
class BalanceUpdate(BaseModel):
    user_id: int
    balance: int

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤ —Ñ–∞–π–ª
def save_user_balances(balances):
    with open("balances.json", "w") as f:
        json.dump(balances, f)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–ª–∞–Ω—Å–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
def load_user_balances():
    try:
        with open("balances.json", "r") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

# –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
user_balances = load_user_balances()

@app.post("/update_balance")
async def update_balance(update: BalanceUpdate):
    user_id = update.user_id
    new_balance = update.balance

    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_balances[user_id] = new_balance
    save_user_balances(user_balances)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ

    return {"status": "success", "new_balance": new_balance}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram
application = Application.builder().token(TOKEN).build()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    username = update.effective_user.first_name

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤–ø–µ—Ä–≤—ã–µ
    if user_id not in user_balances:
        user_balances[user_id] = 0  # –ë–∞–ª–∞–Ω—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é = 0

    balance = user_balances[user_id]

    keyboard = [
        [InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ MiniApp", web_app={"url": "https://gitw1n.github.io/mini-app-test/"})],
        [InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å (–ú–æ–∂–Ω–æ –ø–æ –∫–æ–º–∞–Ω–¥–µ /balance)", callback_data='check_balance')]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)

    text = f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}!\n–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance}‚ÇΩ'

    await update.message.reply_text(
        text=text,
        reply_markup=reply_markup
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    choice = query.data

    if choice == 'check_balance':
        user_id = update.effective_user.id
        balance = user_balances.get(user_id, 0)
        response = f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: üí∞ {balance}‚ÇΩ"
    else:
        response = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä."

    await query.edit_message_text(text=response)

# üì• –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞
async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    balance = user_balances.get(user_id, 0)
    await update.message.reply_text(f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: üí∞ {balance}‚ÇΩ")

# –ó–∞—â–∏—Ç–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
ADMIN_USER_ID = 1024171288  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID

async def users(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    
    if user_id != ADMIN_USER_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    if not user_balances:
        await update.message.reply_text("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    # –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users_list = "\n".join([f"User ID: {user_id}, Balance: {balance}‚ÇΩ" 
                            for user_id, balance in user_balances.items()])
    
    await update.message.reply_text(f"–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{users_list}")

application.add_handler(CommandHandler("users", users))

# üì• –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
async def add_balance(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É–º–º—É
        amount = int(context.args[0])
        if amount <= 0:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –±–æ–ª—å—à–µ 0.")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_balances[user_id] = user_balances.get(user_id, 0) + amount
        save_user_balances(user_balances)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ

        await update.message.reply_text(f"–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount}‚ÇΩ. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: üí∞ {user_balances[user_id]}‚ÇΩ")

    except (IndexError, ValueError):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /add_balance <—Å—É–º–º–∞>")

# üì• –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ping
async def ping(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id

    if user_id != ADMIN_USER_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        result = subprocess.run(["ping", "-c", "4", "8.8.8.8"], capture_output=True, text=True, timeout=10)
        
        if result.returncode == 0:
            await update.message.reply_text(f"–†–µ–∑—É–ª—å—Ç–∞—Ç ping:\n{result.stdout}")
        else:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ ping:\n{result.stderr}")

    except subprocess.TimeoutExpired:
        await update.message.reply_text("–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ.")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã
application.add_handler(CommandHandler("ping", ping))
import httpx

client_id = CLIENT_ID
client_secret = CLIENT_SECRET
redirect_uri = REDIRECT_URI

async def get_access_token(auth_code):
    url = "https://yoomoney.ru/oauth/token"
    
    data = {
        "client_id": client_id,
        "client_secret": client_secret,
        "redirect_uri": redirect_uri,
        "code": auth_code,
        "grant_type": "authorization_code"
    }

    async with httpx.AsyncClient() as client:
        response = await client.post(url, data=data)

    if response.status_code == 200:
        result = response.json()
        access_token = result.get('access_token')
        refresh_token = result.get('refresh_token')
        return access_token, refresh_token
    else:
        return None, None

async def get_user_info(access_token):
    url = "https://yoomoney.ru/api/account-info"
    headers = {
        "Authorization": f"Bearer {access_token}"
    }

    async with httpx.AsyncClient() as client:
        response = await client.get(url, headers=headers)

    if response.status_code == 200:
        return response.json()  # –î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    else:
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
async def create_payment_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ (–Ω–µ –º–µ–Ω–µ–µ –¥–≤—É—Ö)
        if len(context.args) < 2:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ.\n–ü—Ä–∏–º–µ—Ä: /create_payment 100 –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–π")
            return

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É–º–º—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        amount = float(context.args[0])  # –°—É–º–º–∞ - –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç
        description = " ".join(context.args[1:])  # –û–ø–∏—Å–∞–Ω–∏–µ - –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∞—Ä–≥—É–º–µ–Ω—Ç—ã

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–º—ã –Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        if amount <= 0:
            await update.message.reply_text("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
            return

        # –í–∞—à —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞
        access_token = ACSESS_TOKEN  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω

        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ (—Ñ—É–Ω–∫—Ü–∏—è create_payment)
        payment_url = await create_payment_command(amount, description)

        if payment_url:
            await update.message.reply_text(f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã: {payment_url}")
        else:
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.")

    except (IndexError, ValueError):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /create_payment <—Å—É–º–º–∞> <–æ–ø–∏—Å–∞–Ω–∏–µ>")





# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main() -> None:
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("balance", balance))  # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–ª–∞–Ω—Å–∞
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(CommandHandler("add_balance", add_balance))
    application.add_handler(CommandHandler("create_payment", create_payment_command)) 
    application.add_handler(MessageHandler(filters.COMMAND, unknown))  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥

    application.run_polling()

# API –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ FastAPI
@app.post("/add_balance")
async def add_balance_api(update: BalanceUpdate):
    user_id = update.user_id
    amount = update.balance

    if amount <= 0:
        return {"status": "error", "message": "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0."}

    # –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    user_balances[user_id] = user_balances.get(user_id, 0) + amount
    save_user_balances(user_balances)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ

    return {"status": "success", "new_balance": user_balances[user_id]}

@app.post("/payment_notification")
async def payment_notification(data: dict):
    payment_id = data.get("payment_id")
    status = data.get("status")
    user_id = data.get("metadata", {}).get("user_id")
    amount = data.get("amount", {}).get("value")

    if status == "succeeded" and user_id and amount:
        user_balances[int(user_id)] = user_balances.get(int(user_id), 0) + int(amount)
        save_user_balances(user_balances)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–ª–∞–Ω—Å
        return {"status": "success", "message": f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω."}
    
    return {"status": "error", "message": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –Ω–µ—É–¥–∞—á–Ω—ã–π –ø–ª–∞—Ç—ë–∂."}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ FastAPI —Å–µ—Ä–≤–µ—Ä–∞
def run_fastapi():
    uvicorn.run(app, host="0.0.0.0", port=8000)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ FastAPI –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö
if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ FastAPI —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    thread = Thread(target=run_fastapi)
    thread.start()

    # –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞
    main()